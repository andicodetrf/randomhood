{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Card","props","name","email","id","CardList","robots","map","user","i","key","Scroll","console","log","ErrorBoundary","state","hasError","this","setState","children","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","rob","toLowerCase","includes","length","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oOAeeA,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKC,UAAU,OACX,2BACIA,UAAU,sCACVC,KAAK,SACLC,YAAY,qBACZC,SAAUJ,MCSXK,EAhBF,SAACC,GACgBA,EAAnBC,KAAmBD,EAAbE,MAAaF,EAANG,IC2CTC,EAxCE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAoBnB,OACW,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACA,kBAAC,EAAD,CACIC,IAAKD,EACLL,GAAIE,EAAOG,GAAGL,GACdF,KAAMI,EAAOG,GAAGP,KAChBC,MAAOG,EAAOG,GAAGN,aCjB1BQ,G,MAdA,SAACV,GACZW,QAAQC,IAAIZ,KCqBDa,E,kDAvBX,WAAYb,GAAO,IAAD,8BACd,cAAMA,IACDc,MAAQ,CACTC,UAAU,GAHA,E,gEASdC,KAAKC,SAAS,CAACF,UAAU,M,+BAIzB,OAAIC,KAAKF,MAAMC,SACJ,2DAEJC,KAAKhB,MAAMkB,a,GAjBEC,aCiKbC,E,kDA3Id,aAAe,IAAD,8BACb,gBA8BDC,eAAiB,SAACC,GAGjB,EAAKL,SAAS,CAAExB,YAAa6B,EAAMC,OAAOC,SAhC1C,EAAKV,MAAQ,CAEZT,OAAQ,GACRZ,YAAa,IALD,E,gEAaS,IAAD,OACfgC,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAG,GAAU,EAAKZ,SAAS,CAACZ,OAAQwB,S,+BA+BpC,IAAD,OAIIC,EACNd,KAAKF,MAAMT,OAAO0B,QAAO,SAACC,GAC/B,OAAOA,EAAI/B,KACTgC,cACYC,SAAS,EAAKpB,MAAMrB,YAAYwC,kBAOrC,OAAQjB,KAAKF,MAAMT,OAAO8B,OAYtB,yBAAKxC,UAAU,MACX,wBAAIA,UAAU,sBAAd,cACA,kBAAC,EAAD,CAAWD,aAAcsB,KAAKK,iBAS9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUhB,OAAQyB,MAI1B,4BAAQnC,UAAU,OAAlB,kCAC+B,uBAAGyC,KAAK,kCAAR,YA5BnC,yBAAKzC,UAAU,oBACX,wBAAIA,UAAU,sBAAd,cACA,yBAAKA,UAAU,WACf,wCACA,6E,GAtEFwB,aCVEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCNNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,a","file":"static/js/main.1fb2760a.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className=\"pa2\">\n            <input \n                className=\"pa3 ba b--blue br3 bg-lightest-blue\" \n                type='search' \n                placeholder='Search residents..'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Card = (props) => {\n    const {name, email, id} = props;\n    return (\n        // <h1>RoboFriends</h1>\n        \n        <div className=\"bg-navy yellow dib br3 ma2 ph4 grow bw2 shadow-5\">\n            <img alt=\"robots\" src={`https://robohash.org/${id}?set=set5`} width=\"200px\" height=\"200px\"/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n        \n    )\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\n//wrap js in {} when in a html div, so it knows to evaluate\n\n//reads the props received from App.js (Parent) and render smth. this is a pure function. receive same input and will return the same output. deterministic. - pure components - no need to know about anything other than the pure function that it receives smth and returns smth\nconst CardList = ({ robots }) => {\n\n    //to display error in development. log detail error will not display in actual deployed state, keep refreshing to see\n    // if (true){\n    //     throw new Error('Noooo')\n    // }\n\n\n\t//need provide a key=id especially for loop so that if that card gets deleted, react would know to change the DOM for that one card instead of scanning through and changing all\n\t// const cardComponent = robots.map((user, i) => {\n\t// \treturn (\n\t// \t\t<Card\n\t// \t\t\tkey={i}\n\t// \t\t\tid={robots[i].id}\n\t// \t\t\tname={robots[i].name}\n\t// \t\t\temail={robots[i].email}\n\t// \t\t/>\n\t// \t);\n\t// });\n\n\treturn (\n            <div>\n            {\n                robots.map((user, i) => {\n                    return(\n                    <Card\n                        key={i}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        email={robots[i].email}\n                    />  \n                    \n                    )\n                })\n            }\n            {/* {cardComponent} */}\n        </div>\n    )\n};\n\nexport default CardList;\n","import React from 'react';\n\n//every props have children\n//Scroll is a new component created that wraps the cardlist component\nconst Scroll = (props) => {\n    console.log(props)\n    return (\n        \n        //style={{}} outer curly is JS exp, inner curly is an object and you can style that object\n        //overflow-y (css)\n        //overflowY (jsx)\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n\n}\n\nexport default Scroll;\n\n\n\n\n\n","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    \n    //its like trycatch. its react;s lifecyclehook\n    componentDidCatch(){\n        this.setState({hasError: true})\n    }\n\n    render(){\n        if (this.state.hasError){\n            return <h1> Oooppss! That is not good </h1>\n        } \n        return this.props.children\n\n    }\n    \n}\n\n\nexport default ErrorBoundary;","import React, { Component } from \"react\";\n// import { robots } from \"./robots\";\nimport SearchBox from \"../components/SearchBox.js\";\nimport CardList from \"../components/CardList.js\";\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\n// const state ={\n//     robots: robots,\n//     searchfield: ''\n// }\n\n//STATE - an object that describes your application. & state that decribes this application is the robots and whatever is entered in the search box and state is able to change, able to change the value of the search box (val of input) and change what gets displayed.\n//a parent feeds state into a child component and as soon as child component receive a state, it is a property; that child can never change that property. the parent just tells it what state is, and the child receives as robot.\n\n//PROPS - property that we keep passing down. props are always just input that we get and we never modify them. props are things that come out of State\n\n\n//CHILDREN - \n\n//state usually live in parent component. things that can change and affect our app. the parent component that passes the state to diff children components\nclass App extends Component {\n\t//constructor & render methods are prebuilt React component methods\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n            // robots: robots,\n\t\t\trobots: [],\n\t\t\tsearchfield: \"\",\n        };\n        \n        // console.log('1')\n\t}\n\n\n    //fetch is a window object. a tool that lets us make requests to servers\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then( response => response.json())\n        .then(users => {this.setState({robots: users})});\n        // .then( response => {\n        //     return response.json();\n        // })\n        // .then(users => {\n        //     this.setState({robots: users});\n        // });\n        // \n        // console.log('2')\n    }\n\n\n\n\t//custom function for search\n\t//\n\tonSearchChange = (event) => {\n\t\t// console.log(event.target.value);\n\t\t//searchfield starts with '', then whenever you type into the searchbox, searchfield gets updated with input below\n\t\tthis.setState({ searchfield: event.target.value });\n\t\t//never do this.state.searchfield = xxx\n\n\t\t//the value of this.state.robots is not refering to the App. instead referring to the input value (coz the event happend in the input) which does not have a state. therefore, must always do onsearchchange = (event) => { } instead of onsearchchange(event) {} so that this.state.robots will reference this App (Parent)\n\n\n        //put this filter into render to render the filtered robot page.\n\t\t// const filteredRobots = this.state.robots.filter(rob => {\n\t\t//     return rob.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t// })\n\t\t// console.log(filteredRobots);\n\t};\n\n\trender() {\n        // //if you dont want to keep doing this.state.robots then destructure here:\n        // const {robots, searchfield } = this.state;\n\n        const filteredRobots =\n        this.state.robots.filter((rob) => {\n\t\t\treturn rob.name\n\t\t\t\t.toLowerCase()\n                .includes(this.state.searchfield.toLowerCase());\n\n        });\n        //if it is an if else, can make it into ternary\n        // if (!this.state.robots.length){\n            //means if robots == 0 (which naturally is false), make it true via ! and execute this if block\n            \n            return !this.state.robots.length ? \n            (\n                <div className=\"tc main-load-div\">\n                    <h1 className=\"tracking-in-expand\">RandomHood</h1>\n                    <div className=\"loader\"></div>\n                    <p> loading </p>\n                    <footer>\n                        Adapted from RoboFriends - By Andi L\n                    </footer>\n                </div>\n            ) : \n            (\n                <div className=\"tc\">\n                    <h1 className=\"tracking-in-expand\">RandomHood</h1>\n                    <SearchBox searchChange={this.onSearchChange} />\n    \n                    {/* its now referencing App's constructor this.state robots:robots and passed down as props to cardlist etc*/}\n    \n                    {/* SHOWING ALL ROBOTS (WITH & WITHOUT STATE)*/}\n                    {/* <CardList robots={this.state.robots} /> */}\n                    {/* <CardList robots={robots} /> */}\n    \n                    {/* SHOWING ALL OR FILTERED ROBOTS */}\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundary>\n                    </Scroll>\n\n                    <footer className=\"pv4\">\n                    Adapted from ZTM RoboFriends - <a href=\"https://andrealau.netlify.app/\">Andi L</a>\n                    </footer>\n    \n                </div>\n            )\n\n        //     if(!this.state.robots.length){\n        //     return (\n        //         <div className=\"tc main-load-div\">\n        //             <h1 className=\"tracking-in-expand\">RoboFriends</h1>\n        //             <div className=\"loader\"></div>\n        //             <p> loading </p>\n        //             <footer>\n        //                 footer\n        //             </footer>\n        //         </div>\n        //     )\n        // } else {\n        //     return (\n        //         <div className=\"tc\">\n        //             <h1 className=\"tracking-in-expand\">RoboFriends</h1>\n        //             <SearchBox searchChange={this.onSearchChange} />\n    \n        //             {/* its now referencing App's constructor this.state robots:robots and passed down as props to cardlist etc*/}\n    \n        //             {/* SHOWING ALL ROBOTS (WITH & WITHOUT STATE)*/}\n        //             {/* <CardList robots={this.state.robots} /> */}\n        //             {/* <CardList robots={robots} /> */}\n    \n        //             {/* SHOWING ALL OR FILTERED ROBOTS */}\n        //             <Scroll>\n        //                 <CardList robots={filteredRobots} />\n        //             </Scroll>\n\n        //             <footer className=\"pv4\">\n        //                 footer\n        //             </footer>\n    \n        //         </div>\n        //     );\n\n\n        // }\n\t\t\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\n// import Card from './Card';\n// import CardList from './CardList.js';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//because your export in robots.js is not default export (means not single altho it is only exp 1 thing) you need to destructure it using {robots, cats, etc}. diff from Card which export default\n// import { robots } from './robots';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}