{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","props","name","email","id","alt","src","width","height","CardList","robots","map","user","i","key","Scroll","style","overflowY","border","children","ErrorBoundary","state","hasError","this","setState","Component","connect","searchField","searchRobots","requestRobots","isPending","error","dispatch","onSearchChange","event","text","target","value","console","log","payload","onRequestRobots","fetch","then","response","json","data","catch","useEffect","filteredRobots","filter","rob","toLowerCase","includes","href","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8b608bb9.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className=\"pa2\">\n            <input \n                className=\"pa3 ba b--blue br3 bg-lightest-blue\" \n                type='search' \n                placeholder='Search residents..'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Card = (props) => {\n    const {name, email, id} = props;\n    return (\n        \n        \n        <div className=\"bg-navy yellow dib br3 ma2 ph4 grow bw2 shadow-5\">\n            <img alt=\"robots\" src={`https://robohash.org/${id}?set=set5`} width=\"200px\" height=\"200px\"/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n        \n    )\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\n//wrap js in {} when in a html div, so it knows to evaluate\n\n//reads the props received from App.js (Parent) and render smth. this is a pure function. receive same input and will return the same output. deterministic. - pure components - no need to know about anything other than the pure function that it receives smth and returns smth\nconst CardList = ({ robots }) => {\n\n    //to display error in development. log detail error will not display in actual deployed state, keep refreshing to see\n    // if (true){\n    //     throw new Error('Noooo')\n    // }\n\n\n\t//need provide a key=id especially for loop so that if that card gets deleted, react would know to change the DOM for that one card instead of scanning through and changing all\n\t// const cardComponent = robots.map((user, i) => {\n\t// \treturn (\n\t// \t\t<Card\n\t// \t\t\tkey={i}\n\t// \t\t\tid={robots[i].id}\n\t// \t\t\tname={robots[i].name}\n\t// \t\t\temail={robots[i].email}\n\t// \t\t/>\n\t// \t);\n\t// });\n\n\treturn (\n            <div>\n            {\n                robots.map((user, i) => {\n                    return(\n                    <Card\n                        key={i}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        email={robots[i].email}\n                    />  \n                    \n                    )\n                })\n            }\n            \n        </div>\n    )\n};\n\nexport default CardList;\n","import React from 'react';\n\n//every props have children\n//Scroll is a new component created that wraps the cardlist component\n        //style={{}} outer curly is JS exp, inner curly is an object and you can style that object\n        //overflow-y (css)\n        //overflowY (jsx)\nconst Scroll = (props) => {\n    // console.log(props)\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n\n}\n\nexport default Scroll;\n\n\n\n\n\n","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    \n    //its like trycatch. its react;s lifecyclehook\n    componentDidCatch(){\n        this.setState({hasError: true})\n    }\n\n    render(){\n        if (this.state.hasError){\n            return <h1> Oooppss! That is not good </h1>\n        } \n        return this.props.children\n\n    }\n    \n}\n\n\nexport default ErrorBoundary;","import React, { useState, useEffect } from \"react\";\nimport { connect } from 'react-redux';\n// import { ROBOTS } from \"../robots\";\nimport SearchBox from \"../components/SearchBox.js\";\nimport CardList from \"../components/CardList.js\";\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { requestRobots, setSearchField } from '../actions'\n\n//------------------- REDUX --------------------------- \n//actions >> reducers >> store >> update view\n//actions >>(action goes through middleware before hitting reducers)>> reducers >> store >> update view\n//middleware for eg redux-logger(to log prevState & next State for the reducer), \n//middleware - redux-thunk (for async like ajax calls. a middleware that provides getState & dispatch fn that are passed on. handle sideeffects - like ajax calls) \n\n\n//------------------- REDUX ---------------------------\n\nconst mapStateToProps = state => {\n    //the state searchfield that this is gonna return is going to be used as props in App.\n    return {\n        //state.reducerFn.action if there are many reducers and in index file calls for rootreducer. if only 1 and you made that as your reducer in index file, thn change to state.searchField\n        searchField: state.searchRobots.searchField,\n        // searchField: state.searchField\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n\n    }\n}\n\n//dispatch is what triggers the action\n//use dispatch to send actions to reducer\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\n        //work coz of redux thunk. request robots is gonna return a function\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\n\nfunction App(props){\n    const {searchField, robots, onRequestRobots, onSearchChange, isPending} = props\n    // console.log(props.store.getState())\n    // const [robots, setRobots] = useState([]);\n    // const [searchField, setSearchField] = useState('');\n\n    //now searchfield and onsearchange would come down as props from the store. \n\n \n\n    useEffect(() => {\n        // fetch('https://jsonplaceholder.typicode.com/users')\n        // .then( response => response.json())\n        // .then(users => setRobots(users));\n        // console.log('effect')\n        onRequestRobots()\n    }, [])\n\n    \n    // const onSearchChange = (event) => {\n    //     setSearchField(event.target.value)\n    // }; \n    \n    const filteredRobots = robots.filter((rob) => {\n        return rob.name\n            .toLowerCase()\n            .includes(searchField.toLowerCase());\n    });\n\n    console.log('renders')\n    return (\n            // !props.robots.length ? (\n            isPending ? (\n        \n            <div className=\"tc main-load-div\">\n                <h1 className=\"tracking-in-expand\">RandomHood</h1>\n                <div className=\"loader\"></div>\n                <p> loading </p>\n                <footer>\n                    Adapted from RoboFriends - By Andi L\n                </footer>\n            </div>\n            ) : (\n        \n            <div className=\"tc\">\n                <h1 className=\"tracking-in-expand\">RandomHood</h1>\n                <SearchBox searchChange={onSearchChange} />\n\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n\n                <footer className=\"pv4\">\n                Adapted from ZTM RoboFriends - <a href=\"https://andrealau.netlify.app/\">Andi L</a>\n                </footer>\n\n            </div>\n            \n        )\n    )\n\n    \n}\n\n//connect is gonna run and return another function and that other function is gonna run App\n//connect is gonna make App subscribe to any state changes in the redux store. \n//App is now aware of the redux store. now it needs to know which piece needs to be interested in the store, eg. searchfield and robots\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants'\n\n\nexport const setSearchField = (text) => {\n    console.log(text) //toshow you everything you type is being sent through the actions\n    \n    return {\n        \n        type: CHANGE_SEARCH_FIELD, //action. capitalized coz its a constant. convention. \n        payload: text //sending whatever data to the reducer\n    }\n    \n}\n\n//requestRobots action becomes a higher order function where it returns dispatch function\n//redux thunk recognises that this action is gonna return a function hence it'll give it 'dispatch' in order for the scoped functions to be called\n\n// when requestrobots run as action. the flow is: \n// 1. it goes into the thunk middleware and dispatch 1st function request-robots-pending to the reducer. \n// 2. when it returns a result in thunk, thunk will dispatch either success or error to the reducer\n\nexport const requestRobots = () => (dispatch) => {\n    \n    dispatch({type: REQUEST_ROBOTS_PENDING});     \n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then( response => response.json())\n    .then( data => dispatch({\n        type: REQUEST_ROBOTS_SUCCESS, \n        payload: data\n    }))\n    .catch(error => dispatch({\n        type: REQUEST_ROBOTS_FAILED, \n        payload: error\n    }))\n    \n}\n\n\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\n\n\n//---- for async actions\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\n\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\n\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\n//give a default value so it doesnt throw an error. \nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    console.log(action.type); //test out if it is receiving the action. will log 'CHANGE_SEARCH_FIELD'\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n        return Object.assign({}, state, {searchField: action.payload})\n        // return {...state, searchField: action.payload}\n    default:\n        return state;\n    }\n}\n\n\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return { ...state, isPending: true }\n        case REQUEST_ROBOTS_SUCCESS:\n            return { ...state, robots: action.payload, isPending: false }\n        case REQUEST_ROBOTS_FAILED:\n            return { ...state, error: action.payload, isPending: false }\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport { applyMiddleware, createStore, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\n//reduxthunk midware waits & sees if any actions returns a function instead of objects\n\n//default\n//const store = createStore(rootReducer)\n\nconst logger = createLogger();\n\n//combinereducer is gonna combine all reducers into root reducer\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n\n\n//for now/this exercise, use only 1 function to create store\n// const store = createStore(searchRobots, applyMiddleware(logger))\n\n// //this is ordered. its gonna go through the thunkmiddleware then to logger middleware\n// const store = createStore(searchRobots, applyMiddleware(thunkMiddleware, logger))\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\n\n\n//pass down store as prop via Provider where everywhere can access it rather than keep passing down from component to subcomponents. you'll need to use connect to provide the connection between this and all components that are interested in this store. connect in those components helps you avoid things like using store.subcribe and connect simplifies the process\nReactDOM.render(\n  // <React.StrictMode>\n        <Provider store={store}>\n          <App/>\n        </Provider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}